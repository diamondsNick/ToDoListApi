// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToDoListApi.Data;

#nullable disable

namespace ToDoListApi.Migrations
{
    [DbContext(typeof(ToDoDbContext))]
    partial class ToDoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ToDoListApi.Entities.AssigmentPage", b =>
                {
                    b.Property<long>("AssigmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("PageId")
                        .HasColumnType("bigint");

                    b.Property<long>("AssignmentId")
                        .HasColumnType("bigint");

                    b.HasKey("AssigmentId", "PageId")
                        .HasName("PK_Page_Assignment");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("PageId");

                    b.ToTable("AssignmentsPages", (string)null);
                });

            modelBuilder.Entity("ToDoListApi.Entities.Assignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("CompletionDeadline")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id")
                        .HasName("PK_Assignment");

                    b.HasIndex("StatusId");

                    b.ToTable("Assignments", null, t =>
                        {
                            t.HasCheckConstraint("CK_Assignment_CreationDate", "CreationDate >= '2025-01-01'");
                        });
                });

            modelBuilder.Entity("ToDoListApi.Entities.Page", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK_Pages");

                    b.HasIndex("UserId");

                    b.ToTable("Pages", (string)null);
                });

            modelBuilder.Entity("ToDoListApi.Entities.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id")
                        .HasName("PK_Status");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Status_Name");

                    b.ToTable("Statuses", (string)null);
                });

            modelBuilder.Entity("ToDoListApi.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Login");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ToDoListApi.Entities.AssigmentPage", b =>
                {
                    b.HasOne("ToDoListApi.Entities.Assignment", "Assignment")
                        .WithMany("AssigmentsPages")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Assignment_AssignmentPage");

                    b.HasOne("ToDoListApi.Entities.Page", "Page")
                        .WithMany("AssigmentsPages")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Page_AssignmentPage");

                    b.Navigation("Assignment");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("ToDoListApi.Entities.Assignment", b =>
                {
                    b.HasOne("ToDoListApi.Entities.Status", "CurStatus")
                        .WithMany("Assignments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Assignment_Status");

                    b.Navigation("CurStatus");
                });

            modelBuilder.Entity("ToDoListApi.Entities.Page", b =>
                {
                    b.HasOne("ToDoListApi.Entities.User", "Author")
                        .WithMany("Pages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_Pages");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ToDoListApi.Entities.Assignment", b =>
                {
                    b.Navigation("AssigmentsPages");
                });

            modelBuilder.Entity("ToDoListApi.Entities.Page", b =>
                {
                    b.Navigation("AssigmentsPages");
                });

            modelBuilder.Entity("ToDoListApi.Entities.Status", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("ToDoListApi.Entities.User", b =>
                {
                    b.Navigation("Pages");
                });
#pragma warning restore 612, 618
        }
    }
}
